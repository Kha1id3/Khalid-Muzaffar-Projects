import SwiftUI

struct ChatView: View {
    var character: Character
    @State private var messageText = ""
    @Environment(\.presentationMode) var presentationMode
    @State private var responseIndex = 0

    // Using EnvironmentObject for ChatViewModel
    @EnvironmentObject var chatViewModel: ChatViewModel

    var body: some View {
        VStack {
            ScrollView {
                ForEach(Array(chatViewModel.messages.enumerated()), id: \.offset) { index, message in
                    MessageBubble(message: message, isCurrentUser: message.starts(with: "Me: "))
                }
            }
            .padding(.top)

            MessageInputField(messageText: $messageText, sendMessageAction: sendMessage)
        }
        .navigationTitle(character.name)
        .navigationBarTitleDisplayMode(.inline)
        .navigationBarItems(trailing: Button("Done") {
            presentationMode.wrappedValue.dismiss()
        })
        .interactiveDismissDisabled()
    }

    private func sendMessage() {
        guard !messageText.isEmpty else { return }
        let outgoingMessage = "Me: \(messageText)"
        chatViewModel.messages.append(outgoingMessage)
        messageText = ""

        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            let incomingMessage = self.autoGeneratedResponse()
            chatViewModel.messages.append(incomingMessage)
        }
    }

    private func autoGeneratedResponse() -> String {
        let autoResponses = [
            "Hey!",
            "I am fine, what about you?",
            "I will check and tell you.",
            "I am looking forward to it.",
            "Have a great day!",
            "Goodbye",
            
        ]

        let response = autoResponses[responseIndex]
        responseIndex = (responseIndex + 1) % autoResponses.count
        return response
        }
        }

        struct MessageBubble: View {
        var message: String
        var isCurrentUser: Bool
            
            var body: some View {
                HStack {
                    if isCurrentUser {
                        Spacer()
                    }
                    Text(message.replacingOccurrences(of: "Me: ", with: ""))
                        .padding(10)
                        .foregroundColor(isCurrentUser ? .white : .black)
                        .background(isCurrentUser ? Color.blue : Color.gray.opacity(0.2))
                        .cornerRadius(10)
                    if !isCurrentUser {
                        Spacer()
                    }
                }
                .transition(.slide)
                .animation(.easeInOut, value: isCurrentUser)
            }
        }

struct MessageInputField: View {
    @Binding var messageText: String
    var sendMessageAction: () -> Void
    var body: some View {
        HStack {
            TextField("Message...", text: $messageText)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .frame(minHeight: 30)

            Button(action: sendMessageAction) {
                Image(systemName: "paperplane.fill")
                    .resizable()
                    .frame(width: 24, height: 24)
            }
        }
        .padding()
    }
}

// Preview with ChatViewModel as an environment object
struct ChatView_Previews: PreviewProvider {
static var previews: some View {
ChatView(character: Character(id: 1, name: "Sample", neighborhood: "Sampleville", age: 25, imageName: "sampleImage"))
.environmentObject(ChatViewModel())
}
}
