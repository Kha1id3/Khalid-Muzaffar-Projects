#!/usr/bin/python
# -*- coding:utf-8 -*-

import SSD1331
import time
import config
import traceback
import  os

from PIL import Image,ImageDraw,ImageFont

try:
    disp = SSD1331.SSD1331()

    # Initialize library.
    disp.Init()
    # Clear display.
    disp.clear()

    # Create blank image for drawing.
    image1 = Image.new("RGB", (disp.width, disp.height), "WHITE")
    draw = ImageDraw.Draw(image1)
    font = ImageFont.truetype('Font.ttf', 20)
    font10 = ImageFont.truetype('Font.ttf',13)
    print ("***draw line")
    draw.line([(0,0),(0,63)], fill = "BLUE",width = 5)
    draw.line([(0,0),(95,0)], fill = "BLUE",width = 5)
    draw.line([(0,63),(95,63)], fill = "BLUE",width = 5)
    draw.line([(95,0),(95,63)], fill = "BLUE",width = 5)
    print ("***draw rectangle")
    draw.rectangle([(5,5),(90,30)],fill = "BLUE")
    
    print ("***draw text")
    draw.text((8,0), u'微雪电子 ', font = font, fill = "WHITE")
    draw.text((12, 40), 'Waveshare', font = font10, fill = "BLUE")

    #image1=image1.rotate(45) 
    disp.ShowImage(image1,0,0)
    time.sleep(5)
    
    print ("***draw image")
    image = Image.open('pic.jpg')	
    disp.ShowImage(image,0,0)
    
except KeyboardInterrupt:
    print ('\r\ntraceback.format_exc():\n%s' % traceback.format_exc())
    config.module_exit()
    exit()

#code 2---------------------------------
import time                      # required for sleep
import board
import neopixel                  # lib foe WS2812 strip
 
ledStrip = neopixel.NeoPixel(
                     board.D18,
                     8,
                     brightness=1.0/32,
                     auto_write=False)
 
# function processing given color
def testLED(color):
    for j in range(8):
        ledStrip[j] = color
        ledStrip.show()
        time.sleep(0.1)
        ledStrip[j] = (0, 0, 0)
 
    ledStrip.fill(color)
    ledStrip.show()
    time.sleep(1)
    ledStrip.fill((0,0,0))
    ledStrip.show()
 
while True:
    testLED((255,0,0))
    testLED((0,255,0))
    testLED((0,0,255)) 


#code 3-------------------------------------
import paho.mqtt.client as mqtt			# importing mqtt library
import time
import psutil

BROKER_HOST="localhost" 				# variable for mqtt broker address
PORT=1883						# mqtt broker port
TOPIC="/computing/rpi/cpu"				# topic to publish cpu

def on_connect(client, userdata, flags, rc):		# function called on connected
    if rc==0:
        client.connected_flag=True 			# set flag
        print("Connected OK")
    else:
        print("Bad connection Returned code=",rc)

mqtt.Client.connected_flag=False

client = mqtt.Client("Publisher1")			# creating client object
client.on_connect = on_connect				# defining function o handler on connected

print("Connecting to broker ",BROKER_HOST)
client.connect(BROKER_HOST, port=PORT)			# starting connection
client.loop_start()					# starting mqtt client internal loop

while not client.connected_flag: 			# wait until connected to broker
    print("Waiting for connection")
    time.sleep(1)

try:
    while True:						# main reading loop
        client.publish(TOPIC, psutil.cpu_percent())	# publish current cpu load
        time.sleep(1)
except KeyboardInterrupt:
    print('Stoping CPU publisher')	

client.loop_stop()    					# stop internal mqtt loop
client.disconnect() 	


#code 4-----------------------------------
import paho.mqtt.client as mqtt						# importing mqtt library
from datetime import datetime

BROKER_HOST="localhost" 							# variable for mqtt broker address
PORT=1883									# mqtt broker port
TOPIC="/computing/rpi/cpu"							# topic to publish cpu

def on_connect(client, userdata, flags, rc):		                        # function called on connected
    if rc==0:
        client.connected_flag=True 					        # set flag
        print("Connected OK")
        client.subscribe(TOPIC, qos=0)
    else:
        print("Bad connection Returned code=",rc)

# The callback for when a message is received from the server.
def on_message(client, userdata, msg):
	now = datetime.now().time()
	payload = msg.payload.decode("utf-8")
	print("Msg received {}, topic: {} value: {}".format(now, msg.topic, payload))

mqtt.Client.connected_flag=False

client = mqtt.Client("Subscriber1")					# creating client object
client.on_connect = on_connect						# defining function o handler on connected
client.on_message = on_message

client.connect(BROKER_HOST, port=PORT, keepalive=60)

# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
client.loop_forever() 

#code 5 ---------------------------
import paho.mqtt.client as mqtt				  # importing mqtt library
import time
import psutil

BROKER_HOST="io.adafruit.com"					# variable for mqtt broker address
PORT=1883							# mqtt broker port
TOPIC="test_user/feeds/rpi-cpu"					# topic to publish cpu
ADAFRUIT_USER="test_user"
ADAFRUIT_KEY="YOURS_ADAFRUIT_AIO_KEY"

def on_connect(client, userdata, flags, rc):		        # function called on connected
    if rc==0:
        client.connected_flag=True 				# set flag
        print("Connected OK")
    else:
        print("Bad connection Returned code=",rc)

mqtt.Client.connected_flag=False

client = mqtt.Client("Publisher1")				# creating client object
client.on_connect = on_connect					# defining function o handler on connected

print("Connecting to broker ",BROKER_HOST)
client.username_pw_set(ADAFRUIT_USER, password=ADAFRUIT_KEY)
client.connect(BROKER_HOST, port=PORT)				# starting connection
client.loop_start()						# starting mqtt client internal loop

while not client.connected_flag: 				# wait until connected to broker
    print("Waiting for connection")
    time.sleep(1)

try:
    while True:							# main reading loop
        cpu = psutil.cpu_percent()
        print("CPU",cpu)
        client.publish(TOPIC, cpu, 0, True)	                # publish current cpu load
        time.sleep(5)
except KeyboardInterrupt:
    print('Stoping CPU publisher')	

client.loop_stop()    						# stop internal mqtt loop
client.disconnect() 	


#code 6--------------------
import paho.mqtt.client as mqtt			# importing mqtt library
from datetime import datetime

BROKER_HOST="io.adafruit.com"				# variable for mqtt broker address
PORT=1883						# mqtt broker port
TOPIC="test_user/feeds/rpi-button"			# topic to publish cpu
ADAFRUIT_USER="test_user"
ADAFRUIT_KEY="YOURS_API_KEY"

def on_connect(client, userdata, flags, rc):		# function called on connected
    if rc==0:
        client.connected_flag=True 			# set flag
        print("Connected OK")
        client.subscribe("test_user/errors", qos=0)
        client.subscribe(TOPIC, qos=0)
	
    else:
        print("Bad connection Returned code=",rc)

# The callback for when a message is received from the server.
def on_message(client, userdata, msg):
	now = datetime.now().time()
	payload = msg.payload.decode("utf-8")
	print("Msg received {}, topic: {} value: {}".format(now, msg.topic, payload))



mqtt.Client.connected_flag=False

client = mqtt.Client("Subscriber1")			# creating client object
client.on_connect = on_connect				# defining function o handler on connected
client.on_message = on_message

print("Connecting to broker ",BROKER_HOST)
client.username_pw_set(ADAFRUIT_USER, password=ADAFRUIT_KEY)
client.connect(BROKER_HOST, port=PORT, keepalive=60)

# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
client.loop_forever()